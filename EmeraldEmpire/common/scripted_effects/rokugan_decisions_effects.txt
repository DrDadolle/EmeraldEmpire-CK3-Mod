
######################################
##### Found major Clan
# TODO special event to choose the mon/animal of the new clan ?
# Create Own Dynasty based on your first name ?
# TODO replace with custom_duchy effect !!
# Based on found_kingdom_decision decision effect
create_custom_major_clan_effect = {
	custom_tooltip = create_new_kingdom
	show_as_tooltip = {
		every_held_title = {
			custom = create_title_every_held_duchy
			limit = {
				tier = tier_duchy
			}
			custom_tooltip = create_custom_kingdom_de_jure_changes
		}
	}

	hidden_effect = {
		save_scope_as = founder
		primary_title = {
			save_scope_as = old_title
		}
		
		create_dynamic_title = {
			tier = kingdom
			name = NEW_CREATED_TITLE_NAME
		}
		create_title_and_vassal_change = {
			type = created
			save_scope_as = change
			add_claim_on_loss = no
		}

		scope:new_title = {
			change_title_holder = {
				holder = root
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change
		
		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change_ally
		}
		
		##all allies with opinion > 25 will become your vassal
		every_ally = {
			limit = {
				highest_held_title_tier = tier_duchy
				primary_title = { is_mercenary_company = no }
				primary_title = { is_holy_order = no }
				is_under_direct_e_rokugan_rule = yes
				opinion = { 
					value >= 25
					target = scope:founder
				}
			}

			change_liege = {
				liege = scope:founder
				change = scope:change_ally
			}
			add_opinion = {
				modifier = became_vassal
				target = scope:founder
				opinion = 10 # A lot as the hit of opinion is great
			}

			# Special terms for feudal contracts
			if = {
				limit = {
						government_has_flag = government_is_feudal
				}
				hidden_effect = {
					if = {
						limit = { is_independent_ruler = no } # To avoid errors during tooltip generation (prior to the contract being generated)
						vassal_contract_set_obligation_level = { type = feudal_government_taxes level = 1 }
						vassal_contract_set_obligation_level = { type = feudal_government_levies level = 1 }
					}			
				}
				custom_tooltip = low_obligations_taxes
				custom_tooltip = low_obligations_levies
			}
		}

		resolve_title_and_vassal_change = scope:change_ally
	

		#Check if all territory is from a single Empire, and if so, make Kingdom de jure of that Empire
		every_sub_realm_county = {
			if = {
				limit = {
					exists = empire
				}
				empire = {
					if = {
						limit = {
							NOT = {
								is_in_list = potential_empires
							}
						}
						add_to_list = potential_empires
					}
				}
			}
		}
		if = {
			limit = {
				any_in_list = {
					list = potential_empires
					count > 0
				}
			}
			ordered_in_list = {
				list = potential_empires
				order_by = {
					every_in_de_jure_hierarchy = {
						continue = {
							tier > tier_county
						}
						limit = {
							tier = tier_county
							holder.top_liege = root
						}
						add = 1
					}
				}
				position = 0
				save_scope_as = old_empire
			}
		}
		if = {
			limit = {
				exists = scope:old_empire
			}
			scope:new_title = {
				set_de_jure_liege_title = scope:old_empire
			}
		}
		
		every_held_title = {
			limit = {
				tier = tier_duchy
			}
			if = {
				limit = {
					#Check if you need to notify a player
					OR = {
						AND = {
							exists = kingdom
							kingdom = {
								exists = holder
								holder = {
									NOT = { this = root }
									is_ai = no
								}
							}
						}
						AND = {
							exists = empire
							empire = {
								exists = holder
								holder = {
									NOT = { this = root }
									is_ai = no
								}
							}
						}
					}
				}
				add_to_temporary_list = duchy_for_notification
				root = {
					save_temporary_scope_value_as = {
						name = send_notifications
						value = yes
					}
				}
			}
			set_de_jure_liege_title = scope:new_title
		}

		every_sub_realm_county = {
			limit = {
				exists = duchy
				#NOT = { exists = duchy.holder }
				#holder.top_liege = root
				duchy = {
					save_temporary_scope_as = test_duchy
				}
				holder.top_liege = {
					completely_controls = scope:test_duchy
				}
			}
			if = {
				limit = {
					NOT = {
						duchy = {
							is_in_list = additional_de_jure_duchies
						}
					}
				}
				duchy = {
					set_de_jure_liege_title = scope:new_title
					add_to_list = additional_de_jure_duchies
				}
			}
		}

		##TODO special events to set the color/name of stuff/CoA/Dynasty
		
		scope:new_title = {
			set_coa = scope:old_title
			set_color_from_title = scope:old_title
			set_capital_county = scope:old_title.title_capital_county
		}
		set_primary_title_to = scope:new_title
		
		trigger_event = major_decisions.1101
		
		every_player = {
			if = {
				limit = {
					top_liege = scope:founder
					NOT = { this = root }
				}
				trigger_event = major_decisions.1102
			}
			else_if = {
				limit = {
					exists = scope:send_notifications
					NOT = { this = root }
					NOT = { top_liege = scope:founder }
					any_held_title = {
						any_in_de_jure_hierarchy = {
							continue = {
								tier > tier_duchy
							}
							tier = tier_duchy
							is_in_list = duchy_for_notification
						}
					}
				}
				every_held_title = {
					every_in_de_jure_hierarchy = {
						continue = {
							tier > tier_duchy
						}
						limit = {
							tier = tier_duchy
							is_in_list = duchy_for_notification
						}
						add_to_list = notification_titles	
					}
				}			
				if = {
					limit = {
						any_in_list = {
							list = notification_titles
							count > 0
						}
					}
					trigger_event = major_decisions.1105
				}
			}
		}
	}
}

##################################
##### Found Minor Clan
# TODO special event to choose the mon/animal of the new clan ?
# Create Own Dynasty based on your first name ?
# TODO replace with custom_duchy effect !!
# Based on found_kingdom_decision decision effect
create_custom_minor_clan_effect = {
	custom_tooltip = create_new_minor_clan
	show_as_tooltip = {
		every_held_title = {
			custom = create_title_every_held_county
			limit = {
				tier = tier_county
			}
			custom_tooltip = create_custom_minor_clan_de_jure_changes
		}
	}

	hidden_effect = {
		save_scope_as = founder
		primary_title = {
			save_scope_as = old_title
		}
		
		create_dynamic_title = {
			tier = duchy
			name = $NAME$
		}
		create_title_and_vassal_change = {
			type = created
			save_scope_as = change
			add_claim_on_loss = no
		}
		
		scope:new_title = {
			change_title_holder = {
				holder = root
				change = scope:change
			}
			set_coa = $COA$
			set_color_from_title = $COLOR$
			set_definitive_form = yes # To display "XXX Clan" instead of "Kuni of XXX Clan"
			set_capital_county = scope:old_title.title_capital_county
		}

		#Change house mon to the same of the clan
		house = { 
			set_coa = $COA$
		}


		resolve_title_and_vassal_change = scope:change

		#TODO do the same for Kingdom !
		#Check if all territory is from a single Empire, and if so, make Duchy de jure of that Empire
		# Rokugan Note : Should be ALWAYS be the case, as the decision needs to be vassal from the Emperor
		every_sub_realm_county = {
			if = {
				limit = {
					exists = kingdom
				}
				kingdom = {
					if = {
						limit = {
							NOT = {
								is_in_list = potential_kingdoms
							}
						}
						add_to_list = potential_kingdoms
					}
				}
			}
		}
		if = {
			limit = {
				any_in_list = {
					list = potential_kingdoms
					count > 0
				}
			}
			ordered_in_list = {
				list = potential_kingdoms
				order_by = {
					every_in_de_jure_hierarchy = {
						continue = {
							tier > tier_county
						}
						limit = {
							tier = tier_county
							holder.top_liege = root
						}
						add = 1
					}
				}
				position = 0
				save_scope_as = old_kingdom
			}
		}

		if = {
			limit = {
				exists = scope:old_kingdom
			}
			scope:new_title = {
				set_de_jure_liege_title = scope:old_kingdom
			}
			#Set the new kingdom created as de jure of Emerald Empire
			scope:old_kingdom = {
				set_de_jure_liege_title = title:e_rokugan
			}
		}

		# What if doesn't work ?
		every_held_title = {
			limit = {
				tier = tier_county
			}
			if = {
				limit = {
					#Check if you need to notify a player
					OR = {
						AND = {
							exists = duchy
							kingdom = {
								exists = holder
								holder = {
									NOT = { this = root }
									is_ai = no
								}
							}
						}
						AND = {
							exists = kingdom
							kingdom = {
								exists = holder
								holder = {
									NOT = { this = root }
									is_ai = no
								}
							}
						}
						AND = {
							exists = empire
							empire = {
								exists = holder
								holder = {
									NOT = { this = root }
									is_ai = no
								}
							}
						}
					}
				}
				add_to_temporary_list = county_for_notification
				root = {
					save_temporary_scope_value_as = {
						name = send_notifications
						value = yes
					}
				}
			}
			set_de_jure_liege_title = scope:new_title
			# Change Coat of Arms for all counties
			set_coa = $COA$
		}

		set_primary_title_to = scope:new_title
		
		every_player = {
			if = {
				limit = {
					exists = scope:send_notifications
					NOT = { this = root }
					NOT = { top_liege = scope:founder }
					any_held_title = {
						any_in_de_jure_hierarchy = {
							continue = {
								tier > tier_county
							}
							tier = tier_county
							is_in_list = county_for_notification
						}
					}
				}
				every_held_title = {
					every_in_de_jure_hierarchy = {
						continue = {
							tier > tier_county
						}
						limit = {
							tier = tier_county
							is_in_list = county_for_notification
						}
						add_to_list = notification_titles	
					}
				}			
				if = {
					limit = {
						any_in_list = {
							list = notification_titles
							count > 0
						}
					}
					trigger_event = major_decisions.1105 #TODO update ? Keep it as is ?
					#I have lost de jure territory to a new Minor Clan
				}
			}
		}
	}
}
######################################
##### Reborn snake !
reborn_snake_clan_scripted_effect = {

	give_nickname = nick_reborn_snake

	# Recreate de-jure lands
	title:c_chuda_province = {
		# Save in scope the previous de jure kingdom
		de_jure_liege.de_jure_liege = {
				save_scope_as = old_kingdom_liege
		}
		# Become de jure of snake clan
		set_de_jure_liege_title = title:d_chuda
		set_coa = dynasty:dynasty_chuda #Chuda
	}
	title:d_chuda = {
		change_title_holder = {
			holder = root
			change = scope:change
		}
		set_de_jure_liege_title = scope:old_kingdom_liege
		set_coa = dynasty:dynasty_chuda #Chuda
	}

	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}

	resolve_title_and_vassal_change = scope:change

	# hidden_effect = { set_primary_title_to = title:d_chuda }
	add_prestige = major_prestige_gain

	#Change of dynasty
	house = { save_scope_as = old_house }
	hidden_effect = { set_house = character:lineofchuda2.house }


	# Copy all innovations from previous culture culture
	culture:chuda = {
		hidden_effect = { reset_culture_creation_date = yes }
		get_all_innovations_from = root.culture
	}
	set_culture = culture:chuda
	# Change culture of your family to chuda 
	if = {
		limit = { 
			any_spouse = { 
				is_landed = no 
			} 
		}
		every_spouse = {
			if = {
				limit = { is_ai = yes }
				set_culture = culture:chuda
			}
		}
	}
	if = {
		limit = {
			any_close_family_member = {
				is_landed = no
				NOT = { is_spouse_of = root }
			}
		}
		every_close_family_member = {
			limit = {
				is_landed = no
				NOT = { is_spouse_of = root }
			}
			custom = all_unlanded_family_members
			if = {
				limit = { is_ai = yes }
				set_culture = culture:chuda
			}
			if = {
				# limit = {house =  old_house}
				set_house = character:lineofchuda2.house
			}
		}
		every_child = {
			custom = all_children_custom
			if = {
				limit = { is_ai = yes }
				set_culture = culture:chuda
			}
			if = {
				# limit = {house =  old_house}
				set_house = character:lineofchuda2.house
			}
		}
	}

		#Innovations
		culture:chuda = {
			add_random_innovation = culture_group_military
			add_random_innovation = culture_group_civic
		}

	add_to_global_variable_list = {
		name = unavailable_unique_decisions
		target = flag:restore_snake_clan
	}
	
}
########################################
##### Unite Yasuki to Crane
unite_yasuki_to_crane_scripted_effect = {

	# Becomes de_jure
	title:d_yasuki = {
		set_de_jure_liege_title = title:k_crane_clan
		# convert cutulre
		every_county = {
			limit = {
				culture = culture:yasuki
			}
			set_county_culture = culture:yasuki_crane
		}
	}

	give_nickname = nick_the_unifier
	add_prestige = 1500
	dynasty = { add_dynasty_prestige = 500 }

	# Change culture of all yasuki of your family & vassals. 
	if = {
		limit = {
			culture = culture:yasuki
		}
		set_culture = culture:yasuki_crane
	}
	# Copy all innovations from crab yasuki culture
	culture:yasuki_crane = {
		hidden_effect = { reset_culture_creation_date = yes }
		get_all_innovations_from = culture:yasuki
	}
	if = {
		limit = { 
			any_spouse = { 
				is_landed = no 
				culture = culture:yasuki
			} 
		}
		every_spouse = {
			limit = {
				is_landed = no
				culture = culture:yasuki
			}
			if = {
				limit = { is_ai = yes }
				set_culture = culture:yasuki_crane
			}
		}
	}
	if = {
		limit = {
			any_close_family_member = {
				is_landed = no
				NOT = { is_spouse_of = root }
				culture = culture:yasuki
			}
		}
		every_close_family_member = {
			limit = {
				is_landed = no
				NOT = { is_spouse_of = root }
				culture = culture:yasuki
			}
			custom = all_unlanded_family_members
			if = {
				limit = { is_ai = yes }
				set_culture = culture:yasuki_crane
			}
		}
	}
	if = {
		limit = {
			any_child = {
				culture = culture:yasuki
			}
		}
		every_child = {
			limit = {
				NOT = { 
					culture = culture:yasuki
				}
			}
			custom = all_children_custom
			if = {
				limit = { is_ai = yes }
				set_culture = culture:yasuki_crane
			}
		}
	}
	#Convert appropriate vassals, and their family
	if = {
		limit = {
			any_vassal_or_below = {
				culture = culture:yasuki
			}
		}
		every_vassal_or_below = {
			custom = decision_convert_yasuki_vassals_custom
			limit = {
				culture = culture:yasuki
			}
			if = {
				limit = { is_ai = yes }
				set_culture = culture:yasuki_crane
			}
			hidden_effect = {
				if = {
					limit = { 
						any_spouse = { 
							is_landed = no
							culture = culture:yasuki
						} 
					}
					every_spouse = {
						limit = {
							is_landed = no
							culture = culture:yasuki
						}
						if = {
							limit = { is_ai = yes }
							set_culture = culture:yasuki_crane
						}
					}
				}
				if = {
					limit = {
						any_close_family_member = {
							is_landed = no
							NOT = { is_spouse_of = prev }
							culture = culture:yasuki
						}
					}
					every_close_family_member = {
						limit = {
							is_landed = no
							NOT = { is_spouse_of = prev }
							culture = culture:yasuki
						}
						custom = all_unlanded_family_members
						if = {
							limit = { is_ai = yes }
							set_culture = culture:yasuki_crane
						}
					}
				}
				if = {
					limit = {
						any_child = {
							culture = culture:yasuki
						}
					}
					every_child = {
						limit = {
							culture = culture:yasuki
						}
						custom = all_children_custom
						if = {
							limit = { is_ai = yes }
							set_culture = culture:yasuki_crane
						}
					}
				}
				if = {
					limit = {
						any_vassal_or_below = {
							culture = culture:yasuki
						}
					}
					every_vassal_or_below = {
						custom = decision_convert_yasuki_vassals_custom
						limit = {
							culture = culture:yasuki
						}
						if = {
							limit = { is_ai = yes }
							set_culture = culture:yasuki_crane
						}
						hidden_effect = {
							if = {
								limit = { 
									any_spouse = { 
										is_landed = no 
										culture = culture:yasuki
									} 
								}
								every_spouse = {
									limit = {
										is_landed = no
										culture = culture:yasuki
									}
									if = {
										limit = { is_ai = yes }
										set_culture = culture:yasuki_crane
									}
								}
							}
							if = {
								limit = {
									any_close_family_member = {
										is_landed = no
										NOT = { is_spouse_of = prev }
										culture = culture:yasuki
									}
								}
								every_close_family_member = {
									limit = {
										is_landed = no
										NOT = { is_spouse_of = prev }
										culture = culture:yasuki
									}
									custom = all_unlanded_family_members
									if = {
										limit = { is_ai = yes }
										set_culture = culture:yasuki_crane
									}
								}
							}
							if = {
								limit = {
									any_child = {
										culture = culture:yasuki
									}
								}
								every_child = {
									limit = {
										culture = culture:yasuki
									}
									custom = all_children_custom
									if = {
										limit = { is_ai = yes }
										set_culture = culture:yasuki_crane
									}
								}
							}
						}
					}
				}
			}
		}
	}


	add_to_global_variable_list = {
		name = unavailable_unique_decisions
		target = flag:avenge_yasuki_war
	}
	
}